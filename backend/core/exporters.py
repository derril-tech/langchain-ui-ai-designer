# design_agent/exporters.py
from __future__ import annotations
import json, os
from typing import Dict, Any

def emit_tailwind_config(tokens: Dict[str, Any]) -> str:
    colors = tokens.get("colors", {})
    radius = tokens.get("radius", {})
    boxShadow = tokens.get("boxShadow", {})
    return f"""// autogenerated
import type {{ Config }} from "tailwindcss"
const config: Config = {{
  content: ["./app/**/*.{{ts,tsx}}","./components/**/*.{{ts,tsx}}"],
  theme: {{
    extend: {{
      colors: {json.dumps(colors, indent=2)},
      borderRadius: {json.dumps(radius, indent=2)},
      boxShadow: {json.dumps(boxShadow, indent=2)}
    }}
  }},
  plugins: []
}}
export default config
"""

def emit_layout_tsx(pal: Dict[str, str]) -> str:
    return f"""// autogenerated
import "./globals.css"
import type {{ ReactNode }} from "react"
export const metadata = {{ title: "App", description: "Generated by UI Agent" }}
export default function RootLayout({{ children }}: {{ children: ReactNode }}) {{
  return (
    <html lang="en">
      <body className="bg-[{pal['bg']}] text-[{pal['onBg']}] antialiased">
        <a href="#main" className="sr-only focus:not-sr-only focus:ring-2 focus:ring-offset-2">Skip to content</a>
        {{children}}
      </body>
    </html>
  )
}}
"""

def emit_hero_tsx(pal: Dict[str, str]) -> str:
    return f"""// autogenerated
export default function Hero() {{
  return (
    <section className="mx-auto max-w-7xl px-4 py-20 text-center">
      <h1 className="text-4xl md:text-6xl font-bold tracking-tight">Design that serves a purpose</h1>
      <p className="mt-4 text-lg opacity-90">Conversational, trustworthy AI UX with clear states and citations.</p>
      <div className="mt-8">
        <a className="inline-flex items-center rounded-xl px-6 py-3 font-medium shadow-md"
           style={{{{backgroundColor: "{pal['primary']}", color: "{pal['onPrimary']}"}}}}>
          Get Started
        </a>
      </div>
    </section>
  )
}}
"""

def emit_chat_composer_tsx() -> str:
    return """// autogenerated
"use client"
import { useState } from "react"
export default function ChatComposer({ onSend, isStreaming = false }:{ onSend:(text:string)=>void, isStreaming?:boolean }) {
  const [text,setText]=useState("")
  return (
    <form className="flex items-center gap-2 p-3 rounded-xl shadow-md bg-surface"
          onSubmit={(e)=>{e.preventDefault(); if(text.trim() && !isStreaming){onSend(text); setText("");}}}>
      <input aria-label="Message" className="flex-1 bg-transparent outline-none"
             placeholder="Ask or instructâ€¦" value={text} onChange={(e)=>setText(e.target.value)} 
             disabled={isStreaming} />
      <button type="submit" className="px-4 py-2 rounded-lg font-medium" aria-label="Send"
              disabled={isStreaming || !text.trim()}>
        {isStreaming ? "Thinking..." : "Send"}
      </button>
    </form>
  )
}
"""

def emit_run_timeline_tsx() -> str:
    return """// autogenerated
export default function RunTimeline({ events }:{ events:{type:string; text?:string; timestamp?:string}[] }) {
  const getEventColor = (type: string) => {
    switch(type) {
      case 'thinking': return 'text-yellow-500';
      case 'streaming': return 'text-cyan-500';
      case 'tool': return 'text-purple-500';
      case 'citation': return 'text-green-500';
      case 'error': return 'text-red-500';
      default: return 'text-gray-500';
    }
  }
  
  return (
    <div className="mt-4 space-y-2">
      <h3 className="text-sm font-medium text-gray-700">Agent Activity</h3>
      <ol className="space-y-2 text-sm">
        {events.map((e,i)=>(
          <li key={i} className="flex items-start gap-3 p-2 rounded-lg bg-gray-50">
            <span className={`text-xs font-mono ${getEventColor(e.type)}`}>{e.type}</span>
            <span className="flex-1">{e.text || ""}</span>
            {e.timestamp && <span className="text-xs text-gray-400">{e.timestamp}</span>}
          </li>
        ))}
      </ol>
    </div>
  )
}
"""

def emit_message_bubble_tsx() -> str:
    return """// autogenerated
"use client"
export default function MessageBubble({ 
  content, 
  type = "user", 
  isStreaming = false, 
  citations = [], 
  toolCalls = [] 
}: { 
  content: string; 
  type?: "user" | "assistant"; 
  isStreaming?: boolean;
  citations?: Array<{source: string; text: string}>;
  toolCalls?: Array<{name: string; result: string}>;
}) {
  const isUser = type === "user";
  
  return (
    <div className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-4`}>
      <div className={`max-w-[80%] rounded-lg p-3 ${
        isUser ? 'bg-primary text-onPrimary' : 'bg-surface text-onSurface'
      }`}>
        <div className="whitespace-pre-wrap">
          {content}
          {isStreaming && <span className="animate-pulse">|</span>}
        </div>
        
        {!isUser && citations.length > 0 && (
          <div className="mt-2 pt-2 border-t border-gray-200">
            <details className="text-xs">
              <summary className="cursor-pointer text-citation">Sources ({citations.length})</summary>
              <div className="mt-1 space-y-1">
                {citations.map((cite, i) => (
                  <div key={i} className="p-1 bg-gray-50 rounded">
                    <div className="font-medium">{cite.source}</div>
                    <div className="text-gray-600">{cite.text}</div>
                  </div>
                ))}
              </div>
            </details>
          </div>
        )}
        
        {!isUser && toolCalls.length > 0 && (
          <div className="mt-2 pt-2 border-t border-gray-200">
            <details className="text-xs">
              <summary className="cursor-pointer text-toolCall">Tools Used ({toolCalls.length})</summary>
              <div className="mt-1 space-y-1">
                {toolCalls.map((tool, i) => (
                  <div key={i} className="p-1 bg-gray-50 rounded">
                    <div className="font-medium">{tool.name}</div>
                    <div className="text-gray-600">{tool.result}</div>
                  </div>
                ))}
              </div>
            </details>
          </div>
        )}
      </div>
    </div>
  )
}
"""

def emit_citation_panel_tsx() -> str:
    return """// autogenerated
"use client"
export default function CitationPanel({ 
  citations, 
  confidence 
}: { 
  citations: Array<{source: string; text: string; confidence?: number}>;
  confidence?: number;
}) {
  if (citations.length === 0) return null;
  
  return (
    <div className="mt-4 p-3 rounded-lg bg-green-50 border border-green-200">
      <div className="flex items-center gap-2 mb-2">
        <span className="text-green-600">[BOOK]</span>
        <span className="text-sm font-medium text-green-800">Sources</span>
        {confidence && (
          <span className="text-xs text-green-600">
            Confidence: {Math.round(confidence * 100)}%
          </span>
        )}
      </div>
      <div className="space-y-2">
        {citations.map((cite, i) => (
          <div key={i} className="text-sm">
            <div className="font-medium text-green-800">{cite.source}</div>
            <div className="text-green-700">{cite.text}</div>
          </div>
        ))}
      </div>
    </div>
  )
}
"""

def emit_safety_banner_tsx() -> str:
    return """// autogenerated
"use client"
export default function SafetyBanner({ 
  type, 
  message, 
  onDismiss 
}: { 
  type: "warning" | "error" | "info";
  message: string;
  onDismiss?: () => void;
}) {
  const styles = {
    warning: "bg-yellow-50 border-yellow-200 text-yellow-800",
    error: "bg-red-50 border-red-200 text-red-800", 
    info: "bg-blue-50 border-blue-200 text-blue-800"
  };
  
  const icons = {
    warning: "[WARN]",
    error: "[ERROR]",
    info: "[INFO]"
  };
  
  return (
    <div className={`p-3 rounded-lg border ${styles[type]} mb-4`}>
      <div className="flex items-start gap-2">
        <span>{icons[type]}</span>
        <div className="flex-1 text-sm">{message}</div>
        {onDismiss && (
          <button 
            onClick={onDismiss}
            className="text-xs opacity-60 hover:opacity-100"
          >
            X
          </button>
        )}
      </div>
    </div>
  )
}
"""

def write_project(spec: Dict[str, Any], out_dir="ui-agent-output") -> str:
    os.makedirs(out_dir, exist_ok=True)
    pal = spec["designSystem"]["palette"]
    # Tailwind
    tw = emit_tailwind_config(spec["tailwind"]["configTokens"])
    open(os.path.join(out_dir, "tailwind.config.ts"), "w").write(tw)
    # Next.js
    os.makedirs(os.path.join(out_dir, "app"), exist_ok=True)
    open(os.path.join(out_dir, "app","layout.tsx"), "w").write(emit_layout_tsx(pal))
    open(os.path.join(out_dir, "app","page.tsx"), "w").write(
        """import Hero from "../components/Hero";
import ChatComposer from "../components/ChatComposer";
import RunTimeline from "../components/RunTimeline";
export default function Page(){
  return <main id="main" className="mx-auto max-w-3xl px-4 py-10">
    <Hero/>
    <div className="mt-8 space-y-6">
      <ChatComposer onSend={(t)=>console.log("send",t)}/>
      <RunTimeline events={[{type:"started"},{type:"tool",text:"search docs"},{type:"final"}]}/>
    </div>
  </main>
}"""
    )
    os.makedirs(os.path.join(out_dir, "components"), exist_ok=True)
    open(os.path.join(out_dir, "components","Hero.tsx"), "w").write(emit_hero_tsx(pal))
    open(os.path.join(out_dir, "components","ChatComposer.tsx"), "w").write(emit_chat_composer_tsx())
    open(os.path.join(out_dir, "components","RunTimeline.tsx"), "w").write(emit_run_timeline_tsx())
    
    # Add AI-specific components
    open(os.path.join(out_dir, "components","MessageBubble.tsx"), "w").write(emit_message_bubble_tsx())
    open(os.path.join(out_dir, "components","CitationPanel.tsx"), "w").write(emit_citation_panel_tsx())
    open(os.path.join(out_dir, "components","SafetyBanner.tsx"), "w").write(emit_safety_banner_tsx())
    
    # Save spec
    open(os.path.join(out_dir, "ui-spec.json"), "w").write(json.dumps(spec, indent=2))
    return out_dir
